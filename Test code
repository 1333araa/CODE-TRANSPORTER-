#include <ESP32Servo.h>
#include <Ps3Controller.h>

// === Servo Setup ===
static const int servoPin = 13;
Servo servo1;

// === Motor L298N Setup ===
int motor1Pin1 = 27;
int motor1Pin2 = 26;
int enable1Pin = 14;

const int freq = 30000;
const int pwmChannel = 0;
const int resolution = 8;
int dutyCycle = 170; // default power

// === PS3 Setup ===
int player = 0;
int battery = 0;

void notify() {
  // === Tombol Digital ===
  if( Ps3.event.button_down.cross ) Serial.println("Started pressing the cross button");
  if( Ps3.event.button_up.cross ) Serial.println("Released the cross button");

  if( Ps3.event.button_down.square ) Serial.println("Started pressing the square button");
  if( Ps3.event.button_up.square ) Serial.println("Released the square button");

  if( Ps3.event.button_down.triangle ) Serial.println("Started pressing the triangle button");
  if( Ps3.event.button_up.triangle ) Serial.println("Released the triangle button");

  if( Ps3.event.button_down.circle ) Serial.println("Started pressing the circle button");
  if( Ps3.event.button_up.circle ) Serial.println("Released the circle button");

  if( Ps3.event.button_down.up ) Serial.println("Started pressing the up button");
  if( Ps3.event.button_up.up ) Serial.println("Released the up button");

  if( Ps3.event.button_down.down ) Serial.println("Started pressing the down button");
  if( Ps3.event.button_up.down ) Serial.println("Released the down button");

  if( Ps3.event.button_down.left ) Serial.println("Started pressing the left button");
  if( Ps3.event.button_up.left ) Serial.println("Released the left button");

  if( Ps3.event.button_down.right ) Serial.println("Started pressing the right button");
  if( Ps3.event.button_up.right ) Serial.println("Released the right button");

  if( Ps3.event.button_down.l1 ) Serial.println("Started pressing the left shoulder button");
  if( Ps3.event.button_up.l1 ) Serial.println("Released the left shoulder button");

  if( Ps3.event.button_down.r1 ) Serial.println("Started pressing the right shoulder button");
  if( Ps3.event.button_up.r1 ) Serial.println("Released the right shoulder button");

  if( Ps3.event.button_down.l2 ) Serial.println("Started pressing the left trigger button");
  if( Ps3.event.button_up.l2 ) Serial.println("Released the left trigger button");

  if( Ps3.event.button_down.r2 ) Serial.println("Started pressing the right trigger button");
  if( Ps3.event.button_up.r2 ) Serial.println("Released the right trigger button");

  if( Ps3.event.button_down.select ) Serial.println("Started pressing the select button");
  if( Ps3.event.button_up.select ) Serial.println("Released the select button");

  if( Ps3.event.button_down.start ) Serial.println("Started pressing the start button");
  if( Ps3.event.button_up.start ) Serial.println("Released the start button");

  if( Ps3.event.button_down.ps ) Serial.println("Started pressing the Playstation button");
  if( Ps3.event.button_up.ps ) Serial.println("Released the Playstation button");

  // === Kontrol Servo dengan Stick Kanan ===
  if (abs(Ps3.event.analog_changed.stick.rx) > 2) {
    int angle = map(Ps3.data.analog.stick.rx, -128, 127, 0, 180);
    servo1.write(angle);
    Serial.print("Servo Angle: "); Serial.println(angle);
  }

  // === Kontrol Motor DC dengan Stick Kiri ===
  if (abs(Ps3.event.analog_changed.stick.ly) > 2) {
    int ly = Ps3.data.analog.stick.ly;
    int speed = map(abs(ly), 0, 127, 0, 255);
    if (ly < 0) {
      digitalWrite(motor1Pin1, HIGH);
      digitalWrite(motor1Pin2, LOW);
    } else {
      digitalWrite(motor1Pin1, LOW);
      digitalWrite(motor1Pin2, HIGH);
    }
    ledcWrite(pwmChannel, speed);
    Serial.print("Motor Speed: "); Serial.println(speed);
  }

  // === Baca Posisi Stick ===
  if( abs(Ps3.event.analog_changed.stick.lx) + abs(Ps3.event.analog_changed.stick.ly) > 2 ) {
    Serial.print("Moved the left stick: x=");
    Serial.print(Ps3.data.analog.stick.lx);
    Serial.print(" y=");
    Serial.println(Ps3.data.analog.stick.ly);
  }
  if( abs(Ps3.event.analog_changed.stick.rx) + abs(Ps3.event.analog_changed.stick.ry) > 2 ) {
    Serial.print("Moved the right stick: x=");
    Serial.print(Ps3.data.analog.stick.rx);
    Serial.print(" y=");
    Serial.println(Ps3.data.analog.stick.ry);
  }

  // === Status Baterai ===
  if( battery != Ps3.data.status.battery ) {
    battery = Ps3.data.status.battery;
    Serial.print("The controller battery is ");
    if( battery == ps3_status_battery_charging ) Serial.println("charging");
    else if( battery == ps3_status_battery_full ) Serial.println("FULL");
    else if( battery == ps3_status_battery_high ) Serial.println("HIGH");
    else if( battery == ps3_status_battery_low ) Serial.println("LOW");
    else if( battery == ps3_status_battery_dying ) Serial.println("DYING");
    else if( battery == ps3_status_battery_shutdown ) Serial.println("SHUTDOWN");
    else Serial.println("UNDEFINED");
  }
}

void onConnect() {
  Serial.println("PS3 Controller Connected.");
}

void setup() {
  Serial.begin(115200);

  // Servo init
  servo1.attach(servoPin);

  // Motor init
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(enable1Pin, OUTPUT);
  ledcSetup(pwmChannel, freq, resolution);
  ledcAttachPin(enable1Pin, pwmChannel);
  ledcWrite(pwmChannel, dutyCycle);

  // PS3 init
  Ps3.attach(notify);
  Ps3.attachOnConnect(onConnect);
  Ps3.begin("01:02:03:04:05:06");
  Serial.println("Ready to connect PS3 controller.");
}

void loop() {
  if (!Ps3.isConnected()) return;

  // LED player status update
  Ps3.setPlayer(player);
  player = (player + 1) % 10;
  delay(2000);

  // Tambahan: Jalankan servo sweeping otomatis jika ingin
  for(int posDegrees = 0; posDegrees <= 180; posDegrees++) {
    servo1.write(posDegrees);
    Serial.println(posDegrees);
    delay(20);
  }

  for(int posDegrees = 180; posDegrees >= 0; posDegrees--) {
    servo1.write(posDegrees);
    Serial.println(posDegrees);
    delay(20);
  }
} 
